BROKER SCHEMA ace.bus.api.postExecute
PATH pe.ibk.common, pe.ibk.common.audit;

--SERVICE INPUT--
CREATE COMPUTE MODULE postExecuteCICS_PrepareReq
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		DECLARE refParametersIn REFERENCE TO InputLocalEnvironment.REST.Input.Parameters;
		DECLARE refBody REFERENCE TO InputRoot.JSON.Data;
		DECLARE refEnv REFERENCE TO Environment;
		DECLARE refEnvAudit REFERENCE TO refEnv.Audit;
		DECLARE refOut REFERENCE TO OutputRoot;
		
		--Audit input data
		CALL getInputDataAudit(refEnv,InputLocalEnvironment,InputRoot);
		CALL setPropertiesMessage(refOut,getENCODING_HOST(),getCCSID_HOST());
		
		--Set service secuence
		SET refEnv.Srv.Secuence = '01';
		
		--Input request data JSON to DFDL
		CREATE LASTCHILD OF OutputRoot DOMAIN 'DFDL';
		DECLARE refBodyOut REFERENCE TO OutputRoot.DFDL;
		CALL prepareDataRequestCICS(refBodyOut,refEnv,refParametersIn,refBody);
		--
		CALL setConfigPropertiesCICS(OutputLocalEnvironment,refEnv);
		CALL setMonitoringRequestTime(refEnv);
		CALL getRequestDataAudit(refEnv,OutputRoot,OutputLocalEnvironment);
		
		--Propagate alternative MockLabel
		SET Environment.GROVER.DataCICS = CAST(ASBITSTREAM(OutputRoot.DFDL CCSID getCCSID_HOST() ENCODING getENCODING_HOST()) AS CHARACTER CCSID getCCSID_HOST() ENCODING getENCODING_HOST());
		PROPAGATE TO LABEL 'localFlow';
		RETURN FALSE;
	END;
END MODULE;

--SERVICE RESPONSE--
CREATE COMPUTE MODULE postExecuteCICS_PrepareRes
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		RETURN TRUE;
	END;
END MODULE;

--SERVICE ERROR--
CREATE COMPUTE MODULE postExecuteCICS_PrepareError
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		RETURN TRUE;
	END;
END MODULE;

--MOCK RESPONSE--
CREATE COMPUTE MODULE postExecuteCICS_LocalMockRes
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		DECLARE refParameters REFERENCE TO InputLocalEnvironment.REST.Input.Parameters;
		DECLARE refInput REFERENCE TO InputRoot.DFDL;
		DECLARE refEnv REFERENCE TO Environment;
		DECLARE refEnvAudit REFERENCE TO refEnv.Audit;
		
		DECLARE refMessageIn REFERENCE TO refInput.{C_NS}:MESSAGEHOST;
		CREATE FIELD refMessageIn.HEADER_TLDCPAGO.TLDCPAGO_DATOS_INPUT;
		CREATE FIELD refMessageIn.HEADER_TLDCPAGO.TLDCPAGO_COMMAREA_MPIS;
		CREATE FIELD refMessageIn.HEADER_TLDCPAGO.TLDCPAGO_DATOS_OUTPUT;
		CREATE FIELD refMessageIn.BODY.BPICULTK_OUTPUT;
		
		DECLARE refDfdlHeader REFERENCE TO refMessageIn.HEADER_TLDCPAGO.TLDCPAGO_DATOS_OUTPUT;
		DECLARE refDfdlBody REFERENCE TO refMessageIn.BODY.BPICULTK_OUTPUT;
		
		SET refDfdlHeader.TLDCPAGO_COD_RET = C_CICS_OK_RESP;
		SET refDfdlBody.BPICULTK_OCCURS.BPICULTK_NRO_TOKEN = FormatAlignCadena('11',22,' ','IZQ');
		SET refDfdlBody.BPICULTK_OCCURS.BPICULTK_NRO_SOLICITUD = FormatAlignCadena('22',12,' ','IZQ');
		SET refDfdlBody.BPICULTK_OCCURS.BPICULTK_COD_ERROR = FormatAlignCadena('33',2,' ','IZQ');
		SET refDfdlBody.BPICULTK_OCCURS.BPICULTK_DES_ERROR = FormatAlignCadena('44',60,' ','IZQ');
		SET refDfdlBody.BPICULTK_OCCURS.BPICULTK_CO_LOTE = FormatAlignCadena('55',12,' ','IZQ');
		SET refDfdlBody.BPICULTK_COD_ERROR_OUT = FormatAlignCadena('66',2,' ','IZQ');
		SET refDfdlBody.BPICULTK_DES_ERROR_OUT = FormatAlignCadena('77',60,' ','IZQ');
		SET refDfdlBody.BPICULTK_FILLER_OUT = FormatAlignCadena('88',100,' ','IZQ');
		
		SET refEnv.MOCK.BPICULTK_OCCURS.BPICULTK_NRO_SOLICITUD = refDfdlBody.BPICULTK_OCCURS.BPICULTK_NRO_SOLICITUD;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN 'BLOB';
		CREATE FIELD OutputRoot.BLOB.BLOB;
		CREATE FIELD OutputRoot.Properties.CodedCharSetId;
		SET OutputRoot.Properties = InputProperties;
		DECLARE tramaInput CHARACTER '';
		SET tramaInput = CAST(ASBITSTREAM(refInput CCSID getCCSID_HOST() ENCODING getENCODING_HOST()) AS CHARACTER CCSID getCCSID_HOST() ENCODING getENCODING_HOST());
		SET OutputRoot.BLOB.BLOB = CAST(tramaInput AS BLOB CCSID OutputRoot.Properties.CodedCharSetId);
		
		RETURN TRUE;
	END;
END MODULE;
	


